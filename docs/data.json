{
    "project": {
        "logo": "../examples/assets/img/logo-docs.png",
        "name": "oimo",
        "description": "JavaScript 3D library",
        "version": "1.0.4"
    },
    "files": {
        "src\\collision\\broadphase\\dbvt\\DBVT.js": {
            "name": "src\\collision\\broadphase\\dbvt\\DBVT.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\collision\\broadphase\\dbvt\\DBVTBroadPhase.js": {
            "name": "src\\collision\\broadphase\\dbvt\\DBVTBroadPhase.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\collision\\broadphase\\dbvt\\DBVTBroadPhase_X.js": {
            "name": "src\\collision\\broadphase\\dbvt\\DBVTBroadPhase_X.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\collision\\broadphase\\dbvt\\DBVTNode.js": {
            "name": "src\\collision\\broadphase\\dbvt\\DBVTNode.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\collision\\broadphase\\dbvt\\DBVTProxy.js": {
            "name": "src\\collision\\broadphase\\dbvt\\DBVTProxy.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\collision\\broadphase\\sap\\SAPAxis.js": {
            "name": "src\\collision\\broadphase\\sap\\SAPAxis.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\collision\\broadphase\\sap\\SAPBroadPhase.js": {
            "name": "src\\collision\\broadphase\\sap\\SAPBroadPhase.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\collision\\broadphase\\sap\\SAPBroadPhase_X.js": {
            "name": "src\\collision\\broadphase\\sap\\SAPBroadPhase_X.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\collision\\broadphase\\sap\\SAPElement.js": {
            "name": "src\\collision\\broadphase\\sap\\SAPElement.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\collision\\broadphase\\sap\\SAPProxy.js": {
            "name": "src\\collision\\broadphase\\sap\\SAPProxy.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\collision\\broadphase\\BasicProxy.js": {
            "name": "src\\collision\\broadphase\\BasicProxy.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\collision\\broadphase\\BroadPhase.js": {
            "name": "src\\collision\\broadphase\\BroadPhase.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\collision\\broadphase\\BroadPhase_X.js": {
            "name": "src\\collision\\broadphase\\BroadPhase_X.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\collision\\broadphase\\BruteForceBroadPhase.js": {
            "name": "src\\collision\\broadphase\\BruteForceBroadPhase.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\collision\\broadphase\\BruteForceBroadPhase_X.js": {
            "name": "src\\collision\\broadphase\\BruteForceBroadPhase_X.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\collision\\broadphase\\Pair.js": {
            "name": "src\\collision\\broadphase\\Pair.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\collision\\broadphase\\Proxy.js": {
            "name": "src\\collision\\broadphase\\Proxy.js",
            "modules": {},
            "classes": {
                "Proxy": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\collision\\narrowphase\\BoxBoxCollisionDetector.js": {
            "name": "src\\collision\\narrowphase\\BoxBoxCollisionDetector.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\collision\\narrowphase\\RayCollisionDetector.js": {
            "name": "src\\collision\\narrowphase\\RayCollisionDetector.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\collision\\narrowphase\\SphereBoxCollisionDetector.js": {
            "name": "src\\collision\\narrowphase\\SphereBoxCollisionDetector.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\collision\\narrowphase\\SphereSphereCollisionDetector.js": {
            "name": "src\\collision\\narrowphase\\SphereSphereCollisionDetector.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\collision\\narrowphase\\TetraTetraCollisionDetector.js": {
            "name": "src\\collision\\narrowphase\\TetraTetraCollisionDetector.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\collision\\shape\\BoxShape.js": {
            "name": "src\\collision\\shape\\BoxShape.js",
            "modules": {},
            "classes": {
                "BoxShape": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\collision\\shape\\CylinderShape.js": {
            "name": "src\\collision\\shape\\CylinderShape.js",
            "modules": {},
            "classes": {
                "CylinderShape": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\collision\\shape\\MassInfo.js": {
            "name": "src\\collision\\shape\\MassInfo.js",
            "modules": {},
            "classes": {
                "MassInfo": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\collision\\shape\\Shape.js": {
            "name": "src\\collision\\shape\\Shape.js",
            "modules": {},
            "classes": {
                "Shape": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\collision\\shape\\ShapeConfig.js": {
            "name": "src\\collision\\shape\\ShapeConfig.js",
            "modules": {},
            "classes": {
                "ShapeConfig": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\collision\\shape\\SphereShape.js": {
            "name": "src\\collision\\shape\\SphereShape.js",
            "modules": {},
            "classes": {
                "SphereShape": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\collision\\shape\\TetraShape.js": {
            "name": "src\\collision\\shape\\TetraShape.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\constraint\\contact\\Contact.js": {
            "name": "src\\constraint\\contact\\Contact.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\constraint\\contact\\ContactConstraint.js": {
            "name": "src\\constraint\\contact\\ContactConstraint.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\constraint\\contact\\ContactConstraint_X.js": {
            "name": "src\\constraint\\contact\\ContactConstraint_X.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\constraint\\contact\\ContactLink.js": {
            "name": "src\\constraint\\contact\\ContactLink.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\constraint\\contact\\ContactManifold.js": {
            "name": "src\\constraint\\contact\\ContactManifold.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\constraint\\contact\\Contact_X.js": {
            "name": "src\\constraint\\contact\\Contact_X.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\constraint\\contact\\ManifoldPoint.js": {
            "name": "src\\constraint\\contact\\ManifoldPoint.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\constraint\\joint\\base\\AngularConstraint.js": {
            "name": "src\\constraint\\joint\\base\\AngularConstraint.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\constraint\\joint\\base\\LinearConstraint.js": {
            "name": "src\\constraint\\joint\\base\\LinearConstraint.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\constraint\\joint\\base\\Rotational3Constraint.js": {
            "name": "src\\constraint\\joint\\base\\Rotational3Constraint.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\constraint\\joint\\base\\RotationalConstraint.js": {
            "name": "src\\constraint\\joint\\base\\RotationalConstraint.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\constraint\\joint\\base\\Translational3Constraint.js": {
            "name": "src\\constraint\\joint\\base\\Translational3Constraint.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\constraint\\joint\\base\\TranslationalConstraint.js": {
            "name": "src\\constraint\\joint\\base\\TranslationalConstraint.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\constraint\\joint\\BallAndSocketJoint.js": {
            "name": "src\\constraint\\joint\\BallAndSocketJoint.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\constraint\\joint\\DistanceJoint.js": {
            "name": "src\\constraint\\joint\\DistanceJoint.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\constraint\\joint\\HingeJoint.js": {
            "name": "src\\constraint\\joint\\HingeJoint.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\constraint\\joint\\Joint.js": {
            "name": "src\\constraint\\joint\\Joint.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\constraint\\joint\\LimitMotor.js": {
            "name": "src\\constraint\\joint\\LimitMotor.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\constraint\\joint\\PrismaticJoint.js": {
            "name": "src\\constraint\\joint\\PrismaticJoint.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\constraint\\joint\\SliderJoint.js": {
            "name": "src\\constraint\\joint\\SliderJoint.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\constraint\\joint\\WheelJoint.js": {
            "name": "src\\constraint\\joint\\WheelJoint.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\constraint\\Constraint.js": {
            "name": "src\\constraint\\Constraint.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\core\\RigidBody.js": {
            "name": "src\\core\\RigidBody.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\core\\RigidBody_X.js": {
            "name": "src\\core\\RigidBody_X.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\core\\World.js": {
            "name": "src\\core\\World.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\core\\World_X.js": {
            "name": "src\\core\\World_X.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\math\\AABB.js": {
            "name": "src\\math\\AABB.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "Proxy": {
            "name": "Proxy",
            "shortname": "Proxy",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\collision\\broadphase\\Proxy.js",
            "line": 6,
            "description": "A proxy is used for broad-phase collecting pairs that can be colliding.",
            "is_constructor": 1,
            "author": "lo-th"
        },
        "BoxShape": {
            "name": "BoxShape",
            "shortname": "BoxShape",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\collision\\shape\\BoxShape.js",
            "line": 4,
            "description": "A box shape.",
            "is_constructor": 1,
            "extends": "Shape",
            "author": "lo-th"
        },
        "CylinderShape": {
            "name": "CylinderShape",
            "shortname": "CylinderShape",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\collision\\shape\\CylinderShape.js",
            "line": 6,
            "description": "A cylinder shape.",
            "is_constructor": 1,
            "extends": "Shape",
            "author": "lo-th"
        },
        "MassInfo": {
            "name": "MassInfo",
            "shortname": "MassInfo",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\collision\\shape\\MassInfo.js",
            "line": 3,
            "description": "This class holds mass information of a shape.",
            "is_constructor": 1,
            "author": "saharan"
        },
        "Shape": {
            "name": "Shape",
            "shortname": "Shape",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\collision\\shape\\Shape.js",
            "line": 11,
            "description": "A shape is used to detect collisions of rigid bodies.",
            "is_constructor": 1,
            "author": "lo-th"
        },
        "ShapeConfig": {
            "name": "ShapeConfig",
            "shortname": "ShapeConfig",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\collision\\shape\\ShapeConfig.js",
            "line": 4,
            "description": "A shape configuration holds common configuration data for constructing a shape.\nThese configurations can be reused safely.",
            "is_constructor": 1,
            "author": "lo-th"
        },
        "SphereShape": {
            "name": "SphereShape",
            "shortname": "SphereShape",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\collision\\shape\\SphereShape.js",
            "line": 5,
            "description": "A sphere shape.",
            "is_constructor": 1,
            "extends": "Shape",
            "author": "lo-th"
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "src\\collision\\broadphase\\dbvt\\DBVT.js",
            "line": 4,
            "description": "A dynamic bounding volume tree for the broad-phase algorithm.",
            "author": "lo-th",
            "class": "Proxy"
        },
        {
            "file": "src\\collision\\broadphase\\dbvt\\DBVT.js",
            "line": 24,
            "description": "Move a leaf.",
            "params": [
                {
                    "name": "leaf",
                    "description": ""
                }
            ],
            "class": "Proxy"
        },
        {
            "file": "src\\collision\\broadphase\\dbvt\\DBVT.js",
            "line": 35,
            "description": "Insert a leaf to the tree.",
            "params": [
                {
                    "name": "node",
                    "description": ""
                }
            ],
            "class": "Proxy"
        },
        {
            "file": "src\\collision\\broadphase\\dbvt\\DBVT.js",
            "line": 142,
            "description": "Delete a leaf from the tree.",
            "params": [
                {
                    "name": "node",
                    "description": ""
                }
            ],
            "class": "Proxy"
        },
        {
            "file": "src\\collision\\broadphase\\dbvt\\DBVTBroadPhase.js",
            "line": 5,
            "description": "A broad-phase algorithm using dynamic bounding volume tree.",
            "author": "lo-th",
            "class": "Proxy"
        },
        {
            "file": "src\\collision\\broadphase\\dbvt\\DBVTBroadPhase_X.js",
            "line": 5,
            "description": "A broad-phase algorithm using dynamic bounding volume tree.",
            "author": "lo-th",
            "class": "Proxy"
        },
        {
            "file": "src\\collision\\broadphase\\dbvt\\DBVTNode.js",
            "line": 3,
            "description": "A node of the dynamic bounding volume tree.",
            "author": "saharan",
            "class": "Proxy"
        },
        {
            "file": "src\\collision\\broadphase\\dbvt\\DBVTProxy.js",
            "line": 4,
            "description": "A proxy for dynamic bounding volume tree broad-phase.",
            "author": "saharan",
            "class": "Proxy"
        },
        {
            "file": "src\\collision\\broadphase\\sap\\SAPAxis.js",
            "line": 3,
            "description": "A projection axis for sweep and prune broad-phase.",
            "author": "saharan",
            "class": "Proxy"
        },
        {
            "file": "src\\collision\\broadphase\\sap\\SAPBroadPhase.js",
            "line": 6,
            "description": "A broad-phase collision detection algorithm using sweep and prune.",
            "author": "lo-th",
            "class": "Proxy"
        },
        {
            "file": "src\\collision\\broadphase\\sap\\SAPBroadPhase_X.js",
            "line": 6,
            "description": "A broad-phase collision detection algorithm using sweep and prune.",
            "author": "lo-th",
            "class": "Proxy"
        },
        {
            "file": "src\\collision\\broadphase\\sap\\SAPElement.js",
            "line": 1,
            "description": "An element of proxies.",
            "author": "saharan",
            "class": "Proxy"
        },
        {
            "file": "src\\collision\\broadphase\\sap\\SAPProxy.js",
            "line": 4,
            "description": "A proxy for sweep and prune broad-phase.",
            "author": "lo-th",
            "class": "Proxy"
        },
        {
            "file": "src\\collision\\broadphase\\BasicProxy.js",
            "line": 3,
            "description": "A basic implementation of proxies.",
            "author": "saharan",
            "class": "Proxy"
        },
        {
            "file": "src\\collision\\broadphase\\BroadPhase.js",
            "line": 5,
            "description": "The broad-phase is used for collecting all possible pairs for collision.",
            "class": "Proxy"
        },
        {
            "file": "src\\collision\\broadphase\\BroadPhase.js",
            "line": 22,
            "description": "Create a new proxy.",
            "params": [
                {
                    "name": "shape",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Proxy"
        },
        {
            "file": "src\\collision\\broadphase\\BroadPhase.js",
            "line": 33,
            "description": "Add the proxy into the broad-phase.",
            "params": [
                {
                    "name": "proxy",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Proxy"
        },
        {
            "file": "src\\collision\\broadphase\\BroadPhase.js",
            "line": 43,
            "description": "Remove the proxy from the broad-phase.",
            "params": [
                {
                    "name": "proxy",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Proxy"
        },
        {
            "file": "src\\collision\\broadphase\\BroadPhase.js",
            "line": 54,
            "description": "Returns whether the pair is available or not.",
            "params": [
                {
                    "name": "s1",
                    "description": ""
                },
                {
                    "name": "s2",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Proxy"
        },
        {
            "file": "src\\collision\\broadphase\\BroadPhase_X.js",
            "line": 5,
            "description": "The broad-phase is used for collecting all possible pairs for collision.",
            "class": "Proxy"
        },
        {
            "file": "src\\collision\\broadphase\\BroadPhase_X.js",
            "line": 22,
            "description": "Create a new proxy.",
            "params": [
                {
                    "name": "shape",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Proxy"
        },
        {
            "file": "src\\collision\\broadphase\\BroadPhase_X.js",
            "line": 33,
            "description": "Add the proxy into the broad-phase.",
            "params": [
                {
                    "name": "proxy",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Proxy"
        },
        {
            "file": "src\\collision\\broadphase\\BroadPhase_X.js",
            "line": 43,
            "description": "Remove the proxy from the broad-phase.",
            "params": [
                {
                    "name": "proxy",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Proxy"
        },
        {
            "file": "src\\collision\\broadphase\\BroadPhase_X.js",
            "line": 54,
            "description": "Returns whether the pair is available or not.",
            "params": [
                {
                    "name": "s1",
                    "description": ""
                },
                {
                    "name": "s2",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Proxy"
        },
        {
            "file": "src\\collision\\broadphase\\BruteForceBroadPhase.js",
            "line": 6,
            "description": "A broad-phase algorithm with brute-force search.\nThis always checks for all possible pairs.",
            "class": "Proxy"
        },
        {
            "file": "src\\collision\\broadphase\\BruteForceBroadPhase_X.js",
            "line": 6,
            "description": "A broad-phase algorithm with brute-force search.\nThis always checks for all possible pairs.",
            "class": "Proxy"
        },
        {
            "file": "src\\collision\\broadphase\\Pair.js",
            "line": 1,
            "description": "A pair of shapes that may collide.",
            "author": "saharan",
            "class": "Proxy"
        },
        {
            "file": "src\\collision\\broadphase\\Proxy.js",
            "line": 15,
            "description": "The parent shape.",
            "itemtype": "property",
            "name": "shape",
            "type": "{Shape}",
            "class": "Proxy"
        },
        {
            "file": "src\\collision\\broadphase\\Proxy.js",
            "line": 23,
            "description": "The axis-aligned bounding box.",
            "itemtype": "property",
            "name": "aabb",
            "type": "{AABB}",
            "class": "Proxy"
        },
        {
            "file": "src\\collision\\broadphase\\Proxy.js",
            "line": 37,
            "description": "Update the proxy. Must be inherited\nby a child.",
            "itemtype": "method",
            "name": "update",
            "return": {
                "description": "any"
            },
            "class": "Proxy"
        },
        {
            "file": "src\\collision\\narrowphase\\BoxBoxCollisionDetector.js",
            "line": 4,
            "description": "A collision detector which detects collisions between two boxes.",
            "author": "saharan",
            "class": "BoxShape"
        },
        {
            "file": "src\\collision\\narrowphase\\RayCollisionDetector.js",
            "line": 5,
            "description": "Class for collision detection based on\nray casting. Ray source from THREE. This\nclass should only be used with the tetra\nor a polygon.",
            "author": "xprogram",
            "class": "BoxShape"
        },
        {
            "file": "src\\collision\\narrowphase\\RayCollisionDetector.js",
            "line": 39,
            "author": "bhouston / http://clara.io",
            "class": "BoxShape"
        },
        {
            "file": "src\\collision\\narrowphase\\SphereBoxCollisionDetector.js",
            "line": 5,
            "description": "A collision detector which detects collisions between sphere and box.",
            "author": "saharan",
            "class": "BoxShape"
        },
        {
            "file": "src\\collision\\narrowphase\\SphereSphereCollisionDetector.js",
            "line": 4,
            "description": "A collision detector which detects collisions between two spheres.",
            "author": "saharan",
            "class": "BoxShape"
        },
        {
            "file": "src\\collision\\narrowphase\\TetraTetraCollisionDetector.js",
            "line": 4,
            "description": "Class for checking collisions between 2 tetras,\na shape that is made with 4 vertices and 4 faces\narranged in triangles. With this algorigthm, soft\nbody physics are possible and easier to implement.",
            "author": "xprogram",
            "class": "BoxShape"
        },
        {
            "file": "src\\collision\\shape\\BoxShape.js",
            "line": 19,
            "description": "The width of the box.",
            "itemtype": "property",
            "name": "width",
            "type": "{Number}",
            "class": "BoxShape"
        },
        {
            "file": "src\\collision\\shape\\BoxShape.js",
            "line": 27,
            "description": "The height of the box.",
            "itemtype": "property",
            "name": "height",
            "type": "{Number}",
            "class": "BoxShape"
        },
        {
            "file": "src\\collision\\shape\\BoxShape.js",
            "line": 35,
            "description": "The depth of the box.",
            "itemtype": "property",
            "name": "depth",
            "type": "{Number}",
            "class": "BoxShape"
        },
        {
            "file": "src\\collision\\shape\\BoxShape.js",
            "line": 43,
            "description": "The half-width of the box.",
            "itemtype": "property",
            "name": "halfWidth",
            "type": "{Number}",
            "class": "BoxShape"
        },
        {
            "file": "src\\collision\\shape\\BoxShape.js",
            "line": 51,
            "description": "The half-height of the box.",
            "itemtype": "property",
            "name": "halfHeight",
            "type": "{Number}",
            "class": "BoxShape"
        },
        {
            "file": "src\\collision\\shape\\BoxShape.js",
            "line": 59,
            "description": "The half-depth of the box.",
            "itemtype": "property",
            "name": "halfDepth",
            "type": "{Number}",
            "class": "BoxShape"
        },
        {
            "file": "src\\collision\\shape\\MassInfo.js",
            "line": 13,
            "description": "Mass of the shape.",
            "itemtype": "property",
            "name": "mass",
            "type": "{Number}",
            "class": "MassInfo"
        },
        {
            "file": "src\\collision\\shape\\MassInfo.js",
            "line": 21,
            "description": "The moment inertia of the shape.",
            "itemtype": "property",
            "name": "inertia",
            "type": "{Mat33}",
            "class": "MassInfo"
        },
        {
            "file": "src\\collision\\shape\\Shape.js",
            "line": 23,
            "description": "The global identification of the shape should be unique to the shape.",
            "itemtype": "property",
            "name": "id",
            "type": "{Number}",
            "class": "Shape"
        },
        {
            "file": "src\\collision\\shape\\Shape.js",
            "line": 31,
            "description": "The previous shape in parent rigid body. Used\nfor fast interations.",
            "itemtype": "property",
            "name": "prev",
            "type": "{Shape}",
            "class": "Shape"
        },
        {
            "file": "src\\collision\\shape\\Shape.js",
            "line": 40,
            "description": "The next shape in parent rigid body. Used\nfor fast interations.",
            "itemtype": "property",
            "name": "next",
            "type": "{Shape}",
            "class": "Shape"
        },
        {
            "file": "src\\collision\\shape\\Shape.js",
            "line": 49,
            "description": "The proxy of the shape used for broad-phase collision detection.",
            "itemtype": "property",
            "name": "proxy",
            "type": "{Proxy}",
            "class": "Shape"
        },
        {
            "file": "src\\collision\\shape\\Shape.js",
            "line": 57,
            "description": "The parent rigid body of the shape.",
            "itemtype": "property",
            "name": "parent",
            "type": "{RigidBody}",
            "class": "Shape"
        },
        {
            "file": "src\\collision\\shape\\Shape.js",
            "line": 65,
            "description": "The linked list of the contacts with the shape.",
            "itemtype": "property",
            "name": "contactLink",
            "type": "{ContactLink}",
            "class": "Shape"
        },
        {
            "file": "src\\collision\\shape\\Shape.js",
            "line": 73,
            "description": "The number of the contacts with the shape.",
            "itemtype": "property",
            "name": "numContacts",
            "type": "{Number}",
            "class": "Shape"
        },
        {
            "file": "src\\collision\\shape\\Shape.js",
            "line": 81,
            "description": "The center of gravity of the shape in world coordinate system.",
            "itemtype": "property",
            "name": "position",
            "type": "{Vec3}",
            "class": "Shape"
        },
        {
            "file": "src\\collision\\shape\\Shape.js",
            "line": 89,
            "description": "The rotation matrix of the shape in world coordinate system.",
            "itemtype": "property",
            "name": "rotation",
            "type": "{Mat33}",
            "class": "Shape"
        },
        {
            "file": "src\\collision\\shape\\Shape.js",
            "line": 97,
            "description": "The position of the shape in parent's coordinate system.",
            "itemtype": "property",
            "name": "relativePosition",
            "type": "{Vec3}",
            "class": "Shape"
        },
        {
            "file": "src\\collision\\shape\\Shape.js",
            "line": 105,
            "description": "The rotation matrix of the shape in parent's coordinate system.",
            "itemtype": "property",
            "name": "relativeRotation",
            "type": "{Mat33}",
            "class": "Shape"
        },
        {
            "file": "src\\collision\\shape\\Shape.js",
            "line": 113,
            "description": "The axis-aligned bounding box of the shape.",
            "itemtype": "property",
            "name": "aabb",
            "type": "{AABB}",
            "class": "Shape"
        },
        {
            "file": "src\\collision\\shape\\Shape.js",
            "line": 121,
            "description": "The density of the shape.",
            "itemtype": "property",
            "name": "density",
            "type": "{Number}",
            "class": "Shape"
        },
        {
            "file": "src\\collision\\shape\\Shape.js",
            "line": 129,
            "description": "The coefficient of friction of the shape.",
            "itemtype": "property",
            "name": "friction",
            "type": "{Number}",
            "class": "Shape"
        },
        {
            "file": "src\\collision\\shape\\Shape.js",
            "line": 137,
            "description": "The coefficient of restitution of the shape.",
            "itemtype": "property",
            "name": "restitution",
            "type": "{Number}",
            "class": "Shape"
        },
        {
            "file": "src\\collision\\shape\\Shape.js",
            "line": 145,
            "description": "The bits of the collision groups to which the shape belongs.",
            "itemtype": "property",
            "name": "belongsTo",
            "type": "{Number}",
            "class": "Shape"
        },
        {
            "file": "src\\collision\\shape\\Shape.js",
            "line": 153,
            "description": "The bits of the collision groups with which the shape collides.",
            "itemtype": "property",
            "name": "collidesWith",
            "type": "{Number}",
            "class": "Shape"
        },
        {
            "file": "src\\collision\\shape\\Shape.js",
            "line": 167,
            "description": "Calculate the mass information of the shape.",
            "itemtype": "method",
            "name": "calculateMassInfo",
            "return": {
                "description": "void"
            },
            "class": "Shape"
        },
        {
            "file": "src\\collision\\shape\\Shape.js",
            "line": 179,
            "description": "Update the proxy of the shape.",
            "itemtype": "method",
            "name": "updateProxy",
            "return": {
                "description": "void"
            },
            "class": "Shape"
        },
        {
            "file": "src\\collision\\shape\\ShapeConfig.js",
            "line": 15,
            "description": "The position of the shape in parent's coordinate system.",
            "itemtype": "property",
            "name": "relativePosition",
            "type": "{Vec3}",
            "class": "ShapeConfig"
        },
        {
            "file": "src\\collision\\shape\\SphereShape.js",
            "line": 20,
            "description": "The radius of the shape.",
            "itemtype": "property",
            "name": "radius",
            "type": "{Number}",
            "class": "SphereShape"
        },
        {
            "file": "src\\collision\\shape\\TetraShape.js",
            "line": 4,
            "description": "A tetra shape.",
            "author": "xprogram",
            "class": ""
        },
        {
            "file": "src\\constraint\\contact\\Contact.js",
            "line": 6,
            "description": "A contact is a pair of shapes whose axis-aligned bounding boxes are overlapping.",
            "author": "saharan",
            "class": ""
        },
        {
            "file": "src\\constraint\\contact\\Contact.js",
            "line": 73,
            "description": "Update the contact manifold.",
            "class": ""
        },
        {
            "file": "src\\constraint\\contact\\Contact.js",
            "line": 149,
            "description": "Attach the contact to the shapes.",
            "params": [
                {
                    "name": "shape1",
                    "description": ""
                },
                {
                    "name": "shape2",
                    "description": ""
                }
            ],
            "class": ""
        },
        {
            "file": "src\\constraint\\contact\\Contact.js",
            "line": 203,
            "description": "Detach the contact from the shapes.",
            "class": ""
        },
        {
            "file": "src\\constraint\\contact\\ContactConstraint.js",
            "line": 6,
            "description": "...",
            "author": "saharan",
            "class": ""
        },
        {
            "file": "src\\constraint\\contact\\ContactConstraint.js",
            "line": 44,
            "description": "Attach the constraint to the bodies.",
            "class": ""
        },
        {
            "file": "src\\constraint\\contact\\ContactConstraint.js",
            "line": 59,
            "description": "Detach the constraint from the bodies.",
            "class": ""
        },
        {
            "file": "src\\constraint\\contact\\ContactConstraint_X.js",
            "line": 6,
            "description": "...",
            "author": "lo-th",
            "class": ""
        },
        {
            "file": "src\\constraint\\contact\\ContactConstraint_X.js",
            "line": 56,
            "description": "Attach the constraint to the bodies.",
            "class": ""
        },
        {
            "file": "src\\constraint\\contact\\ContactConstraint_X.js",
            "line": 72,
            "description": "Detach the constraint from the bodies.",
            "class": ""
        },
        {
            "file": "src\\constraint\\contact\\ContactLink.js",
            "line": 1,
            "description": "A link list of contacts.",
            "author": "saharan",
            "class": ""
        },
        {
            "file": "src\\constraint\\contact\\ContactManifold.js",
            "line": 4,
            "description": "A contact manifold between two shapes.",
            "author": "saharan",
            "class": ""
        },
        {
            "file": "src\\constraint\\contact\\ContactManifold.js",
            "line": 30,
            "description": "Reset the manifold.",
            "params": [
                {
                    "name": "shape1",
                    "description": ""
                },
                {
                    "name": "shape2",
                    "description": ""
                }
            ],
            "class": ""
        },
        {
            "file": "src\\constraint\\contact\\ContactManifold.js",
            "line": 42,
            "description": "Add a point into this manifold.",
            "params": [
                {
                    "name": "x",
                    "description": ""
                },
                {
                    "name": "y",
                    "description": ""
                },
                {
                    "name": "z",
                    "description": ""
                },
                {
                    "name": "normalX",
                    "description": ""
                },
                {
                    "name": "normalY",
                    "description": ""
                },
                {
                    "name": "normalZ",
                    "description": ""
                },
                {
                    "name": "penetration",
                    "description": ""
                },
                {
                    "name": "flip",
                    "description": ""
                }
            ],
            "class": ""
        },
        {
            "file": "src\\constraint\\contact\\Contact_X.js",
            "line": 6,
            "description": "A contact is a pair of shapes whose axis-aligned bounding boxes are overlapping.",
            "author": "saharan",
            "class": ""
        },
        {
            "file": "src\\constraint\\contact\\Contact_X.js",
            "line": 69,
            "description": "Update the contact manifold.",
            "class": ""
        },
        {
            "file": "src\\constraint\\contact\\Contact_X.js",
            "line": 147,
            "description": "Attach the contact to the shapes.",
            "params": [
                {
                    "name": "shape1",
                    "description": ""
                },
                {
                    "name": "shape2",
                    "description": ""
                }
            ],
            "class": ""
        },
        {
            "file": "src\\constraint\\contact\\Contact_X.js",
            "line": 190,
            "description": "Detach the contact from the shapes.",
            "class": ""
        },
        {
            "file": "src\\constraint\\contact\\ManifoldPoint.js",
            "line": 3,
            "description": "The class holds details of the contact point.",
            "author": "saharan",
            "class": ""
        },
        {
            "file": "src\\constraint\\joint\\base\\AngularConstraint.js",
            "line": 5,
            "description": "An angular constraint for all axes for various joints.",
            "author": "saharan",
            "class": ""
        },
        {
            "file": "src\\constraint\\joint\\base\\LinearConstraint.js",
            "line": 4,
            "description": "A linear constraint for all axes for various joints.",
            "author": "saharan",
            "class": ""
        },
        {
            "file": "src\\constraint\\joint\\base\\Rotational3Constraint.js",
            "line": 1,
            "description": "A three-axis rotational constraint for various joints.",
            "author": "saharan",
            "class": ""
        },
        {
            "file": "src\\constraint\\joint\\base\\RotationalConstraint.js",
            "line": 1,
            "description": "A rotational constraint for various joints.",
            "author": "saharan",
            "class": ""
        },
        {
            "file": "src\\constraint\\joint\\base\\Translational3Constraint.js",
            "line": 1,
            "description": "A three-axis translational constraint for various joints.",
            "author": "saharan",
            "class": ""
        },
        {
            "file": "src\\constraint\\joint\\base\\TranslationalConstraint.js",
            "line": 1,
            "description": "A translational constraint for various joints.",
            "author": "saharan",
            "class": ""
        },
        {
            "file": "src\\constraint\\joint\\BallAndSocketJoint.js",
            "line": 5,
            "description": "A ball-and-socket joint limits relative translation on two anchor points on rigid bodies.",
            "author": "lo-th",
            "class": ""
        },
        {
            "file": "src\\constraint\\joint\\DistanceJoint.js",
            "line": 9,
            "description": "A distance joint limits the distance between two anchor points on rigid bodies.",
            "author": "lo-th",
            "class": ""
        },
        {
            "file": "src\\constraint\\joint\\HingeJoint.js",
            "line": 12,
            "description": "A hinge joint allows only for relative rotation of rigid bodies along the axis.",
            "author": "lo-th",
            "class": ""
        },
        {
            "file": "src\\constraint\\joint\\Joint.js",
            "line": 7,
            "description": "Joints are used to constrain the motion between two rigid bodies.",
            "author": "lo-th",
            "class": ""
        },
        {
            "file": "src\\constraint\\joint\\LimitMotor.js",
            "line": 1,
            "description": "An information of limit and motor.",
            "author": "saharan",
            "class": ""
        },
        {
            "file": "src\\constraint\\joint\\LimitMotor.js",
            "line": 33,
            "description": "Set limit data into this constraint.",
            "params": [
                {
                    "name": "lowerLimit",
                    "description": ""
                },
                {
                    "name": "upperLimit",
                    "description": ""
                }
            ],
            "class": ""
        },
        {
            "file": "src\\constraint\\joint\\LimitMotor.js",
            "line": 44,
            "description": "Set motor data into this constraint.",
            "params": [
                {
                    "name": "motorSpeed",
                    "description": ""
                },
                {
                    "name": "maxMotorForce",
                    "description": ""
                }
            ],
            "class": ""
        },
        {
            "file": "src\\constraint\\joint\\LimitMotor.js",
            "line": 55,
            "description": "Set spring data into this constraint.",
            "params": [
                {
                    "name": "frequency",
                    "description": ""
                },
                {
                    "name": "dampingRatio",
                    "description": ""
                }
            ],
            "class": ""
        },
        {
            "file": "src\\constraint\\joint\\PrismaticJoint.js",
            "line": 12,
            "description": "A prismatic joint allows only for relative translation of rigid bodies along the axis.",
            "author": "lo-th",
            "class": ""
        },
        {
            "file": "src\\constraint\\joint\\SliderJoint.js",
            "line": 13,
            "description": "A slider joint allows for relative translation and relative rotation between two rigid bodies along the axis.",
            "author": "lo-th",
            "class": ""
        },
        {
            "file": "src\\constraint\\joint\\WheelJoint.js",
            "line": 12,
            "description": "A wheel joint allows for relative rotation between two rigid bodies along two axes.\nThe wheel joint also allows for relative translation for the suspension.",
            "author": "lo-th",
            "class": ""
        },
        {
            "file": "src\\constraint\\Constraint.js",
            "line": 4,
            "description": "The base class of all type of the constraints.",
            "author": "saharan",
            "class": ""
        },
        {
            "file": "src\\constraint\\Constraint.js",
            "line": 25,
            "description": "Prepare for solving the constraint.",
            "params": [
                {
                    "name": "timeStep",
                    "description": ""
                },
                {
                    "name": "invTimeStep",
                    "description": ""
                }
            ],
            "class": ""
        },
        {
            "file": "src\\constraint\\Constraint.js",
            "line": 33,
            "description": "Solve the constraint.\nThis is usually called iteratively.",
            "class": ""
        },
        {
            "file": "src\\constraint\\Constraint.js",
            "line": 40,
            "description": "Do the post-processing.",
            "class": ""
        },
        {
            "file": "src\\core\\RigidBody.js",
            "line": 20,
            "description": "The class of rigid body.\nRigid body has the shape of a single or multiple collision processing,\nI can set the parameters individually.",
            "author": "lo-th",
            "class": ""
        },
        {
            "file": "src\\core\\RigidBody.js",
            "line": 129,
            "description": "I'll add a shape to rigid body.\nIf you add a shape, please call the setupMass method to step up to the start of the next.",
            "params": [
                {
                    "name": "shape",
                    "description": "shape to Add"
                }
            ],
            "class": ""
        },
        {
            "file": "src\\core\\RigidBody.js",
            "line": 145,
            "description": "I will delete the shape from the rigid body.\nIf you delete a shape, please call the setupMass method to step up to the start of the next.",
            "params": [
                {
                    "name": "shape",
                    "description": "shape to Delete"
                }
            ],
            "class": ""
        },
        {
            "file": "src\\core\\RigidBody.js",
            "line": 185,
            "description": "Calulates mass datas(center of gravity, mass, moment inertia, etc...).\nIf the parameter type is set to BODY_STATIC, the rigid body will be fixed to the space.\nIf the parameter adjustPosition is set to true, the shapes' relative positions and\nthe rigid body's position will be adjusted to the center of gravity.",
            "params": [
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "adjustPosition",
                    "description": ""
                }
            ],
            "class": ""
        },
        {
            "file": "src\\core\\RigidBody.js",
            "line": 249,
            "description": "Awake the rigid body.",
            "class": ""
        },
        {
            "file": "src\\core\\RigidBody.js",
            "line": 275,
            "description": "Sleep the rigid body.",
            "class": ""
        },
        {
            "file": "src\\core\\RigidBody.js",
            "line": 300,
            "description": "Get whether the rigid body has not any connection with others.",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": ""
        },
        {
            "file": "src\\core\\RigidBody.js",
            "line": 308,
            "description": "The time integration of the motion of a rigid body, you can update the information such as the shape.\nThis method is invoked automatically when calling the step of the World,\nThere is no need to call from outside usually.",
            "params": [
                {
                    "name": "timeStep",
                    "description": "time"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": ""
        },
        {
            "file": "src\\core\\RigidBody_X.js",
            "line": 21,
            "description": "The class of rigid body.\nRigid body has the shape of a single or multiple collision processing,\nI can set the parameters individually.",
            "author": "saharan",
            "class": ""
        },
        {
            "file": "src\\core\\RigidBody_X.js",
            "line": 133,
            "description": "I'll add a shape to rigid body.\nIf you add a shape, please call the setupMass method to step up to the start of the next.",
            "params": [
                {
                    "name": "shape",
                    "description": "shape to Add"
                }
            ],
            "class": ""
        },
        {
            "file": "src\\core\\RigidBody_X.js",
            "line": 152,
            "description": "I will delete the shape from the rigid body.\nIf you delete a shape, please call the setupMass method to step up to the start of the next.",
            "params": [
                {
                    "name": "shape",
                    "description": "shape to Delete"
                }
            ],
            "class": ""
        },
        {
            "file": "src\\core\\RigidBody_X.js",
            "line": 194,
            "description": "Calulates mass datas(center of gravity, mass, moment inertia, etc...).\nIf the parameter type is set to BODY_STATIC, the rigid body will be fixed to the space.\nIf the parameter adjustPosition is set to true, the shapes' relative positions and\nthe rigid body's position will be adjusted to the center of gravity.",
            "params": [
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "adjustPosition",
                    "description": ""
                }
            ],
            "class": ""
        },
        {
            "file": "src\\core\\RigidBody_X.js",
            "line": 262,
            "description": "Awake the rigid body.",
            "class": ""
        },
        {
            "file": "src\\core\\RigidBody_X.js",
            "line": 294,
            "description": "Sleep the rigid body.",
            "class": ""
        },
        {
            "file": "src\\core\\RigidBody_X.js",
            "line": 321,
            "description": "Get whether the rigid body has not any connection with others.",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": ""
        },
        {
            "file": "src\\core\\RigidBody_X.js",
            "line": 330,
            "description": "The time integration of the motion of a rigid body, you can update the information such as the shape.\nThis method is invoked automatically when calling the step of the World,\nThere is no need to call from outside usually.",
            "params": [
                {
                    "name": "timeStep",
                    "description": "time"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": ""
        },
        {
            "file": "src\\core\\World.js",
            "line": 39,
            "description": "The class of physical computing world. \nYou must be added to the world physical all computing objects",
            "author": "lo-th",
            "class": ""
        },
        {
            "file": "src\\core\\World.js",
            "line": 154,
            "description": "Reset the randomizer and remove all rigid bodies, shapes, joints and any object from the world.",
            "class": ""
        },
        {
            "file": "src\\core\\World.js",
            "line": 172,
            "description": "I'll add a rigid body to the world. \nRigid body that has been added will be the operands of each step.",
            "params": [
                {
                    "name": "rigidBody",
                    "description": "Rigid body that you want to add"
                }
            ],
            "class": ""
        },
        {
            "file": "src\\core\\World.js",
            "line": 194,
            "description": "I will remove the rigid body from the world. \nRigid body that has been deleted is excluded from the calculation on a step-by-step basis.",
            "params": [
                {
                    "name": "rigidBody",
                    "description": "Rigid body to be removed"
                }
            ],
            "class": ""
        },
        {
            "file": "src\\core\\World.js",
            "line": 243,
            "description": "I'll add a shape to the world..\nAdd to the rigid world, and if you add a shape to a rigid body that has been added to the world, \nShape will be added to the world automatically, please do not call from outside this method.",
            "params": [
                {
                    "name": "shape",
                    "description": "Shape you want to add"
                }
            ],
            "class": ""
        },
        {
            "file": "src\\core\\World.js",
            "line": 261,
            "description": "I will remove the shape from the world.\nAdd to the rigid world, and if you add a shape to a rigid body that has been added to the world, \nShape will be added to the world automatically, please do not call from outside this method.",
            "params": [
                {
                    "name": "shape",
                    "description": "Shape you want to delete"
                }
            ],
            "class": ""
        },
        {
            "file": "src\\core\\World.js",
            "line": 274,
            "description": "I'll add a joint to the world. \nJoint that has been added will be the operands of each step.",
            "params": [
                {
                    "name": "shape",
                    "description": "Joint to be added"
                }
            ],
            "class": ""
        },
        {
            "file": "src\\core\\World.js",
            "line": 293,
            "description": "I will remove the joint from the world. \nJoint that has been added will be the operands of each step.",
            "params": [
                {
                    "name": "shape",
                    "description": "Joint to be deleted"
                }
            ],
            "class": ""
        },
        {
            "file": "src\\core\\World.js",
            "line": 371,
            "description": "I will proceed only time step seconds time of World.",
            "class": ""
        },
        {
            "file": "src\\core\\World.js",
            "line": 673,
            "description": "add someting to world",
            "class": ""
        },
        {
            "file": "src\\core\\World_X.js",
            "line": 40,
            "description": "The class of physical computing world. \nYou must be added to the world physical all computing objects",
            "author": "lo-th",
            "class": ""
        },
        {
            "file": "src\\core\\World_X.js",
            "line": 155,
            "description": "Reset the randomizer and remove all rigid bodies, shapes, joints and any object from the world.",
            "class": ""
        },
        {
            "file": "src\\core\\World_X.js",
            "line": 177,
            "description": "I'll add a rigid body to the world. \nRigid body that has been added will be the operands of each step.",
            "params": [
                {
                    "name": "rigidBody",
                    "description": "Rigid body that you want to add"
                }
            ],
            "class": ""
        },
        {
            "file": "src\\core\\World_X.js",
            "line": 203,
            "description": "I will remove the rigid body from the world. \nRigid body that has been deleted is excluded from the calculation on a step-by-step basis.",
            "params": [
                {
                    "name": "rigidBody",
                    "description": "Rigid body to be removed"
                }
            ],
            "class": ""
        },
        {
            "file": "src\\core\\World_X.js",
            "line": 257,
            "description": "I'll add a shape to the world..\nAdd to the rigid world, and if you add a shape to a rigid body that has been added to the world, \nShape will be added to the world automatically, please do not call from outside this method.",
            "params": [
                {
                    "name": "shape",
                    "description": "Shape you want to add"
                }
            ],
            "class": ""
        },
        {
            "file": "src\\core\\World_X.js",
            "line": 275,
            "description": "I will remove the shape from the world.\nAdd to the rigid world, and if you add a shape to a rigid body that has been added to the world, \nShape will be added to the world automatically, please do not call from outside this method.",
            "params": [
                {
                    "name": "shape",
                    "description": "Shape you want to delete"
                }
            ],
            "class": ""
        },
        {
            "file": "src\\core\\World_X.js",
            "line": 288,
            "description": "I'll add a joint to the world. \nJoint that has been added will be the operands of each step.",
            "params": [
                {
                    "name": "shape",
                    "description": "Joint to be added"
                }
            ],
            "class": ""
        },
        {
            "file": "src\\core\\World_X.js",
            "line": 310,
            "description": "I will remove the joint from the world. \nJoint that has been added will be the operands of each step.",
            "params": [
                {
                    "name": "shape",
                    "description": "Joint to be deleted"
                }
            ],
            "class": ""
        },
        {
            "file": "src\\core\\World_X.js",
            "line": 397,
            "description": "I will proceed only time step seconds time of World.",
            "class": ""
        },
        {
            "file": "src\\core\\World_X.js",
            "line": 718,
            "description": "add someting to world",
            "class": ""
        },
        {
            "file": "src\\math\\AABB.js",
            "line": 4,
            "description": "An axis-aligned bounding box.",
            "author": "lo-th",
            "class": ""
        },
        {
            "file": "src\\math\\AABB.js",
            "line": 114,
            "description": "Set the AABB from an array\nof vertices. From THREE.",
            "author": "xprogram",
            "class": ""
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nA dynamic bounding volume tree for the broad-phase algorithm.",
            "line": " src\\collision\\broadphase\\dbvt\\DBVT.js:4"
        },
        {
            "message": "Missing item type\nMove a leaf.",
            "line": " src\\collision\\broadphase\\dbvt\\DBVT.js:24"
        },
        {
            "message": "Missing item type\nInsert a leaf to the tree.",
            "line": " src\\collision\\broadphase\\dbvt\\DBVT.js:35"
        },
        {
            "message": "Missing item type\nDelete a leaf from the tree.",
            "line": " src\\collision\\broadphase\\dbvt\\DBVT.js:142"
        },
        {
            "message": "Missing item type\nA broad-phase algorithm using dynamic bounding volume tree.",
            "line": " src\\collision\\broadphase\\dbvt\\DBVTBroadPhase.js:5"
        },
        {
            "message": "Missing item type\nA broad-phase algorithm using dynamic bounding volume tree.",
            "line": " src\\collision\\broadphase\\dbvt\\DBVTBroadPhase_X.js:5"
        },
        {
            "message": "Missing item type\nA node of the dynamic bounding volume tree.",
            "line": " src\\collision\\broadphase\\dbvt\\DBVTNode.js:3"
        },
        {
            "message": "Missing item type\nA proxy for dynamic bounding volume tree broad-phase.",
            "line": " src\\collision\\broadphase\\dbvt\\DBVTProxy.js:4"
        },
        {
            "message": "Missing item type\nA projection axis for sweep and prune broad-phase.",
            "line": " src\\collision\\broadphase\\sap\\SAPAxis.js:3"
        },
        {
            "message": "Missing item type\nA broad-phase collision detection algorithm using sweep and prune.",
            "line": " src\\collision\\broadphase\\sap\\SAPBroadPhase.js:6"
        },
        {
            "message": "Missing item type\nA broad-phase collision detection algorithm using sweep and prune.",
            "line": " src\\collision\\broadphase\\sap\\SAPBroadPhase_X.js:6"
        },
        {
            "message": "Missing item type\nAn element of proxies.",
            "line": " src\\collision\\broadphase\\sap\\SAPElement.js:1"
        },
        {
            "message": "Missing item type\nA proxy for sweep and prune broad-phase.",
            "line": " src\\collision\\broadphase\\sap\\SAPProxy.js:4"
        },
        {
            "message": "Missing item type\nA basic implementation of proxies.",
            "line": " src\\collision\\broadphase\\BasicProxy.js:3"
        },
        {
            "message": "Missing item type\nThe broad-phase is used for collecting all possible pairs for collision.",
            "line": " src\\collision\\broadphase\\BroadPhase.js:5"
        },
        {
            "message": "Missing item type\nCreate a new proxy.",
            "line": " src\\collision\\broadphase\\BroadPhase.js:22"
        },
        {
            "message": "Missing item type\nAdd the proxy into the broad-phase.",
            "line": " src\\collision\\broadphase\\BroadPhase.js:33"
        },
        {
            "message": "Missing item type\nRemove the proxy from the broad-phase.",
            "line": " src\\collision\\broadphase\\BroadPhase.js:43"
        },
        {
            "message": "Missing item type\nReturns whether the pair is available or not.",
            "line": " src\\collision\\broadphase\\BroadPhase.js:54"
        },
        {
            "message": "Missing item type\nThe broad-phase is used for collecting all possible pairs for collision.",
            "line": " src\\collision\\broadphase\\BroadPhase_X.js:5"
        },
        {
            "message": "Missing item type\nCreate a new proxy.",
            "line": " src\\collision\\broadphase\\BroadPhase_X.js:22"
        },
        {
            "message": "Missing item type\nAdd the proxy into the broad-phase.",
            "line": " src\\collision\\broadphase\\BroadPhase_X.js:33"
        },
        {
            "message": "Missing item type\nRemove the proxy from the broad-phase.",
            "line": " src\\collision\\broadphase\\BroadPhase_X.js:43"
        },
        {
            "message": "Missing item type\nReturns whether the pair is available or not.",
            "line": " src\\collision\\broadphase\\BroadPhase_X.js:54"
        },
        {
            "message": "Missing item type\nA broad-phase algorithm with brute-force search.\nThis always checks for all possible pairs.",
            "line": " src\\collision\\broadphase\\BruteForceBroadPhase.js:6"
        },
        {
            "message": "Missing item type\nA broad-phase algorithm with brute-force search.\nThis always checks for all possible pairs.",
            "line": " src\\collision\\broadphase\\BruteForceBroadPhase_X.js:6"
        },
        {
            "message": "Missing item type\nA pair of shapes that may collide.",
            "line": " src\\collision\\broadphase\\Pair.js:1"
        },
        {
            "message": "Missing item type\nA collision detector which detects collisions between two boxes.",
            "line": " src\\collision\\narrowphase\\BoxBoxCollisionDetector.js:4"
        },
        {
            "message": "Missing item type\nClass for collision detection based on\nray casting. Ray source from THREE. This\nclass should only be used with the tetra\nor a polygon.",
            "line": " src\\collision\\narrowphase\\RayCollisionDetector.js:5"
        },
        {
            "message": "Missing item type",
            "line": " src\\collision\\narrowphase\\RayCollisionDetector.js:39"
        },
        {
            "message": "Missing item type\nA collision detector which detects collisions between sphere and box.",
            "line": " src\\collision\\narrowphase\\SphereBoxCollisionDetector.js:5"
        },
        {
            "message": "Missing item type\nA collision detector which detects collisions between two spheres.",
            "line": " src\\collision\\narrowphase\\SphereSphereCollisionDetector.js:4"
        },
        {
            "message": "Missing item type\nClass for checking collisions between 2 tetras,\na shape that is made with 4 vertices and 4 faces\narranged in triangles. With this algorigthm, soft\nbody physics are possible and easier to implement.",
            "line": " src\\collision\\narrowphase\\TetraTetraCollisionDetector.js:4"
        },
        {
            "message": "Missing item type\nA tetra shape.",
            "line": " src\\collision\\shape\\TetraShape.js:4"
        },
        {
            "message": "Missing item type\nA contact is a pair of shapes whose axis-aligned bounding boxes are overlapping.",
            "line": " src\\constraint\\contact\\Contact.js:6"
        },
        {
            "message": "Missing item type\nUpdate the contact manifold.",
            "line": " src\\constraint\\contact\\Contact.js:73"
        },
        {
            "message": "Missing item type\nAttach the contact to the shapes.",
            "line": " src\\constraint\\contact\\Contact.js:149"
        },
        {
            "message": "Missing item type\nDetach the contact from the shapes.",
            "line": " src\\constraint\\contact\\Contact.js:203"
        },
        {
            "message": "Missing item type\n...",
            "line": " src\\constraint\\contact\\ContactConstraint.js:6"
        },
        {
            "message": "Missing item type\nAttach the constraint to the bodies.",
            "line": " src\\constraint\\contact\\ContactConstraint.js:44"
        },
        {
            "message": "Missing item type\nDetach the constraint from the bodies.",
            "line": " src\\constraint\\contact\\ContactConstraint.js:59"
        },
        {
            "message": "Missing item type\n...",
            "line": " src\\constraint\\contact\\ContactConstraint_X.js:6"
        },
        {
            "message": "Missing item type\nAttach the constraint to the bodies.",
            "line": " src\\constraint\\contact\\ContactConstraint_X.js:56"
        },
        {
            "message": "Missing item type\nDetach the constraint from the bodies.",
            "line": " src\\constraint\\contact\\ContactConstraint_X.js:72"
        },
        {
            "message": "Missing item type\nA link list of contacts.",
            "line": " src\\constraint\\contact\\ContactLink.js:1"
        },
        {
            "message": "Missing item type\nA contact manifold between two shapes.",
            "line": " src\\constraint\\contact\\ContactManifold.js:4"
        },
        {
            "message": "Missing item type\nReset the manifold.",
            "line": " src\\constraint\\contact\\ContactManifold.js:30"
        },
        {
            "message": "Missing item type\nAdd a point into this manifold.",
            "line": " src\\constraint\\contact\\ContactManifold.js:42"
        },
        {
            "message": "Missing item type\nA contact is a pair of shapes whose axis-aligned bounding boxes are overlapping.",
            "line": " src\\constraint\\contact\\Contact_X.js:6"
        },
        {
            "message": "Missing item type\nUpdate the contact manifold.",
            "line": " src\\constraint\\contact\\Contact_X.js:69"
        },
        {
            "message": "Missing item type\nAttach the contact to the shapes.",
            "line": " src\\constraint\\contact\\Contact_X.js:147"
        },
        {
            "message": "Missing item type\nDetach the contact from the shapes.",
            "line": " src\\constraint\\contact\\Contact_X.js:190"
        },
        {
            "message": "Missing item type\nThe class holds details of the contact point.",
            "line": " src\\constraint\\contact\\ManifoldPoint.js:3"
        },
        {
            "message": "Missing item type\nAn angular constraint for all axes for various joints.",
            "line": " src\\constraint\\joint\\base\\AngularConstraint.js:5"
        },
        {
            "message": "Missing item type\nA linear constraint for all axes for various joints.",
            "line": " src\\constraint\\joint\\base\\LinearConstraint.js:4"
        },
        {
            "message": "Missing item type\nA three-axis rotational constraint for various joints.",
            "line": " src\\constraint\\joint\\base\\Rotational3Constraint.js:1"
        },
        {
            "message": "Missing item type\nA rotational constraint for various joints.",
            "line": " src\\constraint\\joint\\base\\RotationalConstraint.js:1"
        },
        {
            "message": "Missing item type\nA three-axis translational constraint for various joints.",
            "line": " src\\constraint\\joint\\base\\Translational3Constraint.js:1"
        },
        {
            "message": "Missing item type\nA translational constraint for various joints.",
            "line": " src\\constraint\\joint\\base\\TranslationalConstraint.js:1"
        },
        {
            "message": "Missing item type\nA ball-and-socket joint limits relative translation on two anchor points on rigid bodies.",
            "line": " src\\constraint\\joint\\BallAndSocketJoint.js:5"
        },
        {
            "message": "Missing item type\nA distance joint limits the distance between two anchor points on rigid bodies.",
            "line": " src\\constraint\\joint\\DistanceJoint.js:9"
        },
        {
            "message": "Missing item type\nA hinge joint allows only for relative rotation of rigid bodies along the axis.",
            "line": " src\\constraint\\joint\\HingeJoint.js:12"
        },
        {
            "message": "Missing item type\nJoints are used to constrain the motion between two rigid bodies.",
            "line": " src\\constraint\\joint\\Joint.js:7"
        },
        {
            "message": "Missing item type\nAn information of limit and motor.",
            "line": " src\\constraint\\joint\\LimitMotor.js:1"
        },
        {
            "message": "Missing item type\nSet limit data into this constraint.",
            "line": " src\\constraint\\joint\\LimitMotor.js:33"
        },
        {
            "message": "Missing item type\nSet motor data into this constraint.",
            "line": " src\\constraint\\joint\\LimitMotor.js:44"
        },
        {
            "message": "Missing item type\nSet spring data into this constraint.",
            "line": " src\\constraint\\joint\\LimitMotor.js:55"
        },
        {
            "message": "Missing item type\nA prismatic joint allows only for relative translation of rigid bodies along the axis.",
            "line": " src\\constraint\\joint\\PrismaticJoint.js:12"
        },
        {
            "message": "Missing item type\nA slider joint allows for relative translation and relative rotation between two rigid bodies along the axis.",
            "line": " src\\constraint\\joint\\SliderJoint.js:13"
        },
        {
            "message": "Missing item type\nA wheel joint allows for relative rotation between two rigid bodies along two axes.\nThe wheel joint also allows for relative translation for the suspension.",
            "line": " src\\constraint\\joint\\WheelJoint.js:12"
        },
        {
            "message": "Missing item type\nThe base class of all type of the constraints.",
            "line": " src\\constraint\\Constraint.js:4"
        },
        {
            "message": "Missing item type\nPrepare for solving the constraint.",
            "line": " src\\constraint\\Constraint.js:25"
        },
        {
            "message": "Missing item type\nSolve the constraint.\nThis is usually called iteratively.",
            "line": " src\\constraint\\Constraint.js:33"
        },
        {
            "message": "Missing item type\nDo the post-processing.",
            "line": " src\\constraint\\Constraint.js:40"
        },
        {
            "message": "Missing item type\nThe class of rigid body.\nRigid body has the shape of a single or multiple collision processing,\nI can set the parameters individually.",
            "line": " src\\core\\RigidBody.js:20"
        },
        {
            "message": "Missing item type\nI'll add a shape to rigid body.\nIf you add a shape, please call the setupMass method to step up to the start of the next.",
            "line": " src\\core\\RigidBody.js:129"
        },
        {
            "message": "Missing item type\nI will delete the shape from the rigid body.\nIf you delete a shape, please call the setupMass method to step up to the start of the next.",
            "line": " src\\core\\RigidBody.js:145"
        },
        {
            "message": "Missing item type\nCalulates mass datas(center of gravity, mass, moment inertia, etc...).\nIf the parameter type is set to BODY_STATIC, the rigid body will be fixed to the space.\nIf the parameter adjustPosition is set to true, the shapes' relative positions and\nthe rigid body's position will be adjusted to the center of gravity.",
            "line": " src\\core\\RigidBody.js:185"
        },
        {
            "message": "Missing item type\nAwake the rigid body.",
            "line": " src\\core\\RigidBody.js:249"
        },
        {
            "message": "Missing item type\nSleep the rigid body.",
            "line": " src\\core\\RigidBody.js:275"
        },
        {
            "message": "Missing item type\nGet whether the rigid body has not any connection with others.",
            "line": " src\\core\\RigidBody.js:300"
        },
        {
            "message": "Missing item type\nThe time integration of the motion of a rigid body, you can update the information such as the shape.\nThis method is invoked automatically when calling the step of the World,\nThere is no need to call from outside usually.",
            "line": " src\\core\\RigidBody.js:308"
        },
        {
            "message": "Missing item type\nThe class of rigid body.\nRigid body has the shape of a single or multiple collision processing,\nI can set the parameters individually.",
            "line": " src\\core\\RigidBody_X.js:21"
        },
        {
            "message": "Missing item type\nI'll add a shape to rigid body.\nIf you add a shape, please call the setupMass method to step up to the start of the next.",
            "line": " src\\core\\RigidBody_X.js:133"
        },
        {
            "message": "Missing item type\nI will delete the shape from the rigid body.\nIf you delete a shape, please call the setupMass method to step up to the start of the next.",
            "line": " src\\core\\RigidBody_X.js:152"
        },
        {
            "message": "Missing item type\nCalulates mass datas(center of gravity, mass, moment inertia, etc...).\nIf the parameter type is set to BODY_STATIC, the rigid body will be fixed to the space.\nIf the parameter adjustPosition is set to true, the shapes' relative positions and\nthe rigid body's position will be adjusted to the center of gravity.",
            "line": " src\\core\\RigidBody_X.js:194"
        },
        {
            "message": "Missing item type\nAwake the rigid body.",
            "line": " src\\core\\RigidBody_X.js:262"
        },
        {
            "message": "Missing item type\nSleep the rigid body.",
            "line": " src\\core\\RigidBody_X.js:294"
        },
        {
            "message": "Missing item type\nGet whether the rigid body has not any connection with others.",
            "line": " src\\core\\RigidBody_X.js:321"
        },
        {
            "message": "Missing item type\nThe time integration of the motion of a rigid body, you can update the information such as the shape.\nThis method is invoked automatically when calling the step of the World,\nThere is no need to call from outside usually.",
            "line": " src\\core\\RigidBody_X.js:330"
        },
        {
            "message": "Missing item type\nThe class of physical computing world. \nYou must be added to the world physical all computing objects",
            "line": " src\\core\\World.js:39"
        },
        {
            "message": "Missing item type\nReset the randomizer and remove all rigid bodies, shapes, joints and any object from the world.",
            "line": " src\\core\\World.js:154"
        },
        {
            "message": "Missing item type\nI'll add a rigid body to the world. \nRigid body that has been added will be the operands of each step.",
            "line": " src\\core\\World.js:172"
        },
        {
            "message": "Missing item type\nI will remove the rigid body from the world. \nRigid body that has been deleted is excluded from the calculation on a step-by-step basis.",
            "line": " src\\core\\World.js:194"
        },
        {
            "message": "Missing item type\nI'll add a shape to the world..\nAdd to the rigid world, and if you add a shape to a rigid body that has been added to the world, \nShape will be added to the world automatically, please do not call from outside this method.",
            "line": " src\\core\\World.js:243"
        },
        {
            "message": "Missing item type\nI will remove the shape from the world.\nAdd to the rigid world, and if you add a shape to a rigid body that has been added to the world, \nShape will be added to the world automatically, please do not call from outside this method.",
            "line": " src\\core\\World.js:261"
        },
        {
            "message": "Missing item type\nI'll add a joint to the world. \nJoint that has been added will be the operands of each step.",
            "line": " src\\core\\World.js:274"
        },
        {
            "message": "Missing item type\nI will remove the joint from the world. \nJoint that has been added will be the operands of each step.",
            "line": " src\\core\\World.js:293"
        },
        {
            "message": "Missing item type\nI will proceed only time step seconds time of World.",
            "line": " src\\core\\World.js:371"
        },
        {
            "message": "Missing item type\nadd someting to world",
            "line": " src\\core\\World.js:673"
        },
        {
            "message": "Missing item type\nThe class of physical computing world. \nYou must be added to the world physical all computing objects",
            "line": " src\\core\\World_X.js:40"
        },
        {
            "message": "Missing item type\nReset the randomizer and remove all rigid bodies, shapes, joints and any object from the world.",
            "line": " src\\core\\World_X.js:155"
        },
        {
            "message": "Missing item type\nI'll add a rigid body to the world. \nRigid body that has been added will be the operands of each step.",
            "line": " src\\core\\World_X.js:177"
        },
        {
            "message": "Missing item type\nI will remove the rigid body from the world. \nRigid body that has been deleted is excluded from the calculation on a step-by-step basis.",
            "line": " src\\core\\World_X.js:203"
        },
        {
            "message": "Missing item type\nI'll add a shape to the world..\nAdd to the rigid world, and if you add a shape to a rigid body that has been added to the world, \nShape will be added to the world automatically, please do not call from outside this method.",
            "line": " src\\core\\World_X.js:257"
        },
        {
            "message": "Missing item type\nI will remove the shape from the world.\nAdd to the rigid world, and if you add a shape to a rigid body that has been added to the world, \nShape will be added to the world automatically, please do not call from outside this method.",
            "line": " src\\core\\World_X.js:275"
        },
        {
            "message": "Missing item type\nI'll add a joint to the world. \nJoint that has been added will be the operands of each step.",
            "line": " src\\core\\World_X.js:288"
        },
        {
            "message": "Missing item type\nI will remove the joint from the world. \nJoint that has been added will be the operands of each step.",
            "line": " src\\core\\World_X.js:310"
        },
        {
            "message": "Missing item type\nI will proceed only time step seconds time of World.",
            "line": " src\\core\\World_X.js:397"
        },
        {
            "message": "Missing item type\nadd someting to world",
            "line": " src\\core\\World_X.js:718"
        },
        {
            "message": "Missing item type\nAn axis-aligned bounding box.",
            "line": " src\\math\\AABB.js:4"
        },
        {
            "message": "Missing item type\nSet the AABB from an array\nof vertices. From THREE.",
            "line": " src\\math\\AABB.js:114"
        }
    ]
}